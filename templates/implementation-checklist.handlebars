# {{componentName}} Implementation Checklist

## ðŸŽ¯ CRITICAL Seam Implementation: {{purpose}}

**Contract**: `{{contractFileName}}`  
**Stub**: `{{stubFileName}}`  
**Estimated Effort**: {{estimatedEffort}}  
**Priority**: {{priority}}

---

## Phase 1: Foundation Setup ({{foundationEstimate}})

### Dependencies & Environment
- [ ] **Verify TypeScript configuration** (5 min)
  - Check `tsconfig.json` has proper module resolution
  - Verify `.js` imports are configured
- [ ] **Install required dependencies** (10 min)
  ```bash
  npm install {{#each dependencies}}{{this}} {{/each}}
  ```
- [ ] **Setup development environment** (5 min)
  - Configure VS Code for TypeScript
  - Setup auto-imports for SDD patterns

### Contract Validation
- [ ] **Review generated contract** (15 min)
  - Verify `I{{contractName}}` interface completeness
  - Check `{{pascalCaseName}}Request`/`{{pascalCaseName}}Response` types
  - Validate ContractResult<T> usage
- [ ] **Run contract compilation** (5 min)
  ```bash
  npx tsc --noEmit {{contractFileName}}
  ```
- [ ] **Update blueprint comments if needed** (10 min)
  - Add domain-specific integration points
  - Enhance failure mode documentation

---

## Phase 2: Stub Enhancement ({{stubEstimate}})

### Input Validation
- [ ] **Implement robust input validation** (30 min)
  ```typescript
  // Add to {{componentName}}.{{methodName}}()
  if (!request.{{primaryInputField}}) {
    return {
      success: false,
      error: "Missing {{primaryInputField}} - failing fast",
      agentId: this.agentId
    };
  }
  ```
- [ ] **Add business rule validation** (20 min)
  - Check {{#each validationRules}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}
  - Return specific error messages for each rule
- [ ] **Test validation with integration tests** (15 min)

### Error Handling Enhancement
- [ ] **Implement specific error types** (25 min)
  ```typescript
  // Create domain-specific errors
  class {{pascalCaseName}}ValidationError extends AgentError { }
  class {{pascalCaseName}}ProcessingError extends AgentError { }
  ```
- [ ] **Add error recovery mechanisms** (20 min)
- [ ] **Test error scenarios** (15 min)

---

## Phase 3: Core Implementation ({{coreEstimate}})

{{#each implementationSteps}}
### {{stepTitle}} ({{estimate}})

{{#each tasks}}
- [ ] **{{title}}** ({{time}})
  {{#if code}}
  ```{{language}}
  {{code}}
  ```
  {{/if}}
  {{#if description}}
  *{{description}}*
  {{/if}}
{{/each}}

**Validation Checkpoint:**
- [ ] Run tests: `npm test {{testPattern}}`
- [ ] Verify ContractResult compliance
- [ ] Check integration with {{seamDependencies}}

{{/each}}

---

## Phase 4: Integration & Testing ({{integrationEstimate}})

### Seam Registration
- [ ] **Register with SeamManager** (15 min)
  ```typescript
  // In your main application
  seamManager.registerAgent("{{seamName}}", {{camelCaseName}});
  ```
- [ ] **Test seam communication** (20 min)
  ```typescript
  const result = await seamManager.executeSeam("{{seamName}}", request);
  ```
- [ ] **Verify health check integration** (10 min)

### Integration Testing
- [ ] **Run full integration test suite** (30 min)
  ```bash
  npm test -- --grep "{{componentName}} Integration"
  ```
- [ ] **Test with dependent seams** (45 min)
  {{#each dependentSeams}}
  - [ ] Test {{this}} integration (15 min)
  {{/each}}
- [ ] **Performance validation** (20 min)
  - Verify response times < {{maxResponseTime}}
  - Test with concurrent requests

### Documentation
- [ ] **Update README.md** (15 min)
  - Add {{componentName}} usage examples
  - Document seam integration patterns
- [ ] **Generate API documentation** (10 min)
  ```bash
  npx typedoc {{contractFileName}}
  ```
- [ ] **Create troubleshooting guide** (20 min)

---

## Phase 5: Production Readiness ({{productionEstimate}})

### Logging & Monitoring
- [ ] **Add structured logging** (25 min)
  ```typescript
  import { logger } from "./logger.js";
  
  logger.info("{{componentName}}.{{methodName}} started", {
    agentId: this.agentId,
    correlationId: request.correlationId
  });
  ```
- [ ] **Add performance metrics** (20 min)
- [ ] **Setup health monitoring** (15 min)

### Security & Compliance
- [ ] **Input sanitization review** (20 min)
- [ ] **Error message security audit** (15 min)
  - Ensure no sensitive data in error messages
- [ ] **Access control validation** (10 min)

### Final Validation
- [ ] **End-to-end testing** (45 min)
- [ ] **Load testing** (30 min)
- [ ] **Security scan** (15 min)
- [ ] **Code review checklist** (20 min)
  - [ ] ContractResult<T> used consistently
  - [ ] Proper error handling
  - [ ] Blueprint comments complete
  - [ ] Integration tests pass
  - [ ] No hardcoded values

---

## ðŸš€ Deployment Checklist

- [ ] **Version bump** (5 min)
- [ ] **Generate release notes** (10 min)
- [ ] **Deploy to staging** (15 min)
- [ ] **Smoke tests in staging** (20 min)
- [ ] **Deploy to production** (10 min)
- [ ] **Post-deployment monitoring** (30 min)

---

## ðŸ“Š Success Metrics

**Definition of Done:**
- [ ] All integration tests pass (100% coverage)
- [ ] ContractResult<T> compliance verified
- [ ] Health check responds < 100ms
- [ ] Error handling tested for all failure modes
- [ ] Seam integration validated
- [ ] Documentation complete and accurate

**Performance Targets:**
- Response time: < {{maxResponseTime}}
- Error rate: < {{maxErrorRate}}
- Availability: > {{minAvailability}}

**Total Estimated Time**: {{totalEstimate}}
**Priority Level**: {{priority}}
**Next Implementation**: {{nextComponent}}
