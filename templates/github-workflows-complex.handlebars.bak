{{!-- 
PURPOSE: Generate GitHub Actions CI/CD workflow for SDD projects with linting, testing, building, and deployment
DATA FLOW: Push/PR → Lint/Test → Build/Publish → Deploy (staging/production)
INTEGRATION POINTS: GitHub Actions, Node.js, npm/yarn/pnpm, Docker, Coverage services
FAILURE MODES: Build failures, test failures, deployment failures, coverage upload errors
RATIONALE: Automated CI/CD ensures code quality and reliable deployments for SDD projects
EXAMPLES: SDD MCP Server → lint, test, build Docker image, deploy to staging/production
CONTRACT VERSION: 1.0.0
--}}
name: {{workflowName}}

on:
  push:
    branches:
      - {{mainBranch}}
      - {{developBranch}}
      - 'feature/**'
      - 'fix/**'
      - 'release/**'
  pull_request:
    branches:
      - {{mainBranch}}
      - {{developBranch}}
  workflow_dispatch: # Allow manual triggering

jobs:
  lint-and-test:
    name: Lint & Test
    runs-on: {{runsOn}}
    strategy:
      matrix:
        node-version: [{{#each nodeVersions}}"{{this}}"{{#unless @last}}, {{/unless}}{{/each}}]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: '{{packageManager}}'

      - name: Install Dependencies
        run: {{packageManagerInstallCommand}}

      {{#if runLinter}}
      - name: Run Linter (ESLint)
        run: {{packageManagerRunCommand}} lint
      {{/if}}

      {{#if runFormatterCheck}}
      - name: Check Formatting (Prettier)
        run: {{packageManagerRunCommand}} format:check
      {{/if}}      - name: Build Project
        run: {{packageManagerRunCommand}} build
        {{#if buildEnvVars.length}}
        env:
          {{#each buildEnvVars}}
          {{this.name}}: "{{this.value}}"
          {{/each}}
        {{/if}}      - name: Run Unit & Integration Tests
        run: {{packageManagerRunCommand}} test -- --coverage
        {{#if testEnvVars.length}}
        env:
          {{#each testEnvVars}}
          {{this.name}}: "{{this.value}}"
          {{/each}}
        {{/if}}

      {{#if uploadCoverage}}
      - name: Upload Coverage Report
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info,./coverage/coverage-final.json
          fail_ci_if_error: {{failCiOnCoverageError}}        if: github.ref == 'refs/heads/{{mainBranch}}'
      {{/if}}

  {{#if includeBuildAndPublishJob}}
  build-and-publish:
    name: Build & Publish Docker Image
    runs-on: {{runsOn}}
    needs: lint-and-test    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/{{releaseBranchPattern}}')
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to {{dockerRegistryProvider}}
        uses: docker/login-action@v3
        with:
          {{#if (eq dockerRegistryProvider "GitHub Container Registry")}}
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          {{else if (eq dockerRegistryProvider "AWS ECR")}}
          registry: ${{ secrets.AWS_ECR_REGISTRY_URL }}
          {{else}}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          {{/if}}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: {{dockerImageName}}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{versionPattern}}
            type=sha,prefix=,suffix=,event=push
            type=raw,value=latest,enable={{isLatestBranch}}      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./{{dockerfilePath}}
          push: true
          tags: latest
          labels: ""
          cache-from: type=gha
          cache-to: type=gha,mode=max{{#if buildArgs.length}}
          build-args: |
            {{#each buildArgs}}
            {{this.name}}={{this.value}}
            {{/each}}
          {{/if}}
  {{/if}}

  {{#if includeDeploymentJob}}
  deploy-to-staging:
    name: Deploy to Staging
    runs-on: {{runsOn}}
    needs: {{#if includeBuildAndPublishJob}}build-and-publish{{else}}lint-and-test{{/if}}    if: github.event_name == 'push' && github.ref == 'refs/heads/{{developBranch}}'
    environment:
      name: staging
      url: ${{ secrets.STAGING_APP_URL }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      {{#each stagingDeploymentSteps}}
      - name: {{this.name}}
        {{#if this.uses}}
        uses: {{this.uses}}
        {{#if this.with}}
        with:
          {{#each this.with}}
          {{@key}}: {{this}}
          {{/each}}
        {{/if}}
        {{else}}
        run: {{this.run}}
        {{/if}}
        {{#if this.env}}
        env:
          {{#each this.env}}
          {{@key}}: {{this}}
          {{/each}}
        {{/if}}
      {{else}}
      - name: Placeholder Deploy to Staging
        run: echo "Deploying version ${{ github.sha }} to Staging..."
      {{/each}}

  deploy-to-production:
    name: Deploy to Production
    runs-on: {{runsOn}}
    needs: {{#if includeBuildAndPublishJob}}build-and-publish{{else}}lint-and-test{{/if}}
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: ${{ secrets.PRODUCTION_APP_URL }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      {{#each productionDeploymentSteps}}
      - name: {{this.name}}
        {{#if this.uses}}
        uses: {{this.uses}}
        {{#if this.with}}
        with:
          {{#each this.with}}
          {{@key}}: {{this}}
          {{/each}}
        {{/if}}
        {{else}}
        run: {{this.run}}
        {{/if}}
        {{#if this.env}}
        env:
          {{#each this.env}}
          {{@key}}: {{this}}
          {{/each}}
        {{/if}}
      {{else}}
      - name: Placeholder Deploy to Production
        run: echo "Deploying tag ${{ github.ref_name }} to Production..."
      {{/each}}
  {{/if}}
