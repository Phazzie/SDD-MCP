**(PHAZZIE: This is the HELPER PROMPT. Paste this ENTIRE markdown block as your _first_ message to the new GitHub Copilot chat session.)**

---

**PROMPT FOR GITHUB COPILOT: SDD MCP Server - Project Continuity & Tasking Brief (Session #X)**

**SECTION 1: YOUR ROLE & CORE METHODOLOGY (`üéØ COPILOT_ACTION: UNDERSTAND & INTERNALIZE`)**

Hello, Copilot. We are working on a project called the "SDD MCP Server." Your primary role is to act as an AI Programming Assistant to help me develop this server. We are strictly following a methodology called **Seam-Driven Development (SDD)**.

**What is Seam-Driven Development (SDD)?**
SDD is a software design and implementation methodology where we prioritize defining and stabilizing the **communication pathways (seams)** between different software components _before_ we write the detailed logic inside those components. Think of seams as the contracts that dictate how components will talk to each other.

**Our Strict SDD Workflow (You MUST follow this):**

1.  **Identify Seams:** What are the logical points of interaction or communication?
2.  **Define Contracts:** For each seam, what is the precise TypeScript `interface` or `type` defining the methods, inputs, and outputs?
    - All contract methods MUST be `async` and return a `Promise<ContractResult<T>>`.
3.  **Create Stubs:** Implement skeleton versions of the components/methods. These stubs initially just "fail fast" by throwing a `NotImplementedError` or returning a structured error, but they MUST conform to the defined contract.
4.  **Test Connections (Conceptual for now):** Ensure the stubs and contracts align perfectly.
5.  **Implement:** Only after the above steps are solid, we fill in the actual working logic.

**Key Slogan:** **"Seams First, Implementation Second."**

**Essential Code Patterns You MUST Use:**

- **`ContractResult<T>` Pattern:** (Defined in `c:\Users\thump\SkepticalWombat\src\contracts.ts`)
  ```typescript
  export type ContractResult<T> = {
    success: boolean;
    data?: T;
    error?: SDDError; // This is an OBJECT, not a string.
    metadata?: {
      agentId: string; // Mandatory in metadata
      timestamp: string; // Mandatory in metadata
      [key: string]: any; // Allows for other custom metadata
    };
  };
  ```
- **`SDDError` Object Pattern:** (Defined in `c:\Users\thump\SkepticalWombat\src\contracts.ts`)
  ```typescript
  export interface SDDError {
    /* ... as defined in contracts.ts ... */
  }
  // Use helper functions like createSDDError(), createDetailedError() from contracts.ts.
  ```
- **File Imports:** Use `.js` extensions for relative imports (e.g., `import { TypeX } from '../contracts.js';`).

**Your Primary Goal for This Session:** Help me systematically complete partially finished tasks for the "Enhanced Seam Analyzer" and resolve TypeScript errors, strictly following SDD.

---

**SECTION 2: PROJECT OVERVIEW & CURRENT FOCUS (`üìö COPILOT_ACTION: UNDERSTAND PROJECT CONTEXT`)**

We are building the Enhanced Seam Analyzer agent within the SDD MCP Server. This agent analyzes software requirements to identify components, seams, data flows, etc.

- **`EnhancedSeamAnalyzerStub` (in `src/stubs.ts`):** This class is where we've been implementing the core rule-based logic.
  - `analyzeRequirementsEnhanced()` (Phase 6.1): **COMPLETED & QA'd.**
  - `generateInteractionMatrix()` (Phase 6.2): **COMPLETED & QA'd.**
  - `analyzeDataFlows()` (Phase 6.3): **CURRENTLY IN PROGRESS.**
- **`tests/test-analyzeDataFlows.js`:** Test script for `analyzeDataFlows`.
- **`ENHANCED_SEAM_ANALYZER_ROADMAP.md`:** Contains the detailed checklist of tasks for each phase. I (Phazzie) will provide its content if you need to reference specific checklist items.

---

**SECTION 3: SUMMARY OF WHERE WE LEFT OFF (`‚è™ COPILOT_ACTION: UNDERSTAND RECENT HISTORY`)**

1.  We were actively working on **Phase 6.3: `analyzeDataFlows()`** within `EnhancedSeamAnalyzerStub` in `src/stubs.ts`.
2.  The `test-analyzeDataFlows.js` script was created. Initial issues with ES Module imports and paths to compiled `dist` files were resolved.
3.  The last major problem encountered was a `TypeError: this.devUtilities.logError is not a function`. This was fixed by adding `logMessage`, `logError`, and `logAIDiagnostic` methods to the `DevUtilities` class in `src/agents/dev-utilities.ts`.
4.  After fixing that, the test script ran without throwing an immediate `TypeError`, but the actual test cases (1-4, for Simple Flow, Multiple Flows, etc.) were still failing their assertions. This indicates that the core rule-based logic within `analyzeDataFlows` and its helper methods (`mapDataFlows`, `identifyDataTransformations`, etc.) is incomplete or incorrect.
5.  The immediate next step identified was to get `test-analyzeDataFlows.js` to produce clear output for each test case, and then to systematically implement/debug the helper methods for `analyzeDataFlows`.

---

**SECTION 4: KEY GUIDING DOCUMENTS & FILES (`üìö COPILOT_ACTION: NOTE RESOURCES`)**

- `c:\Users\thump\SkepticalWombat\ENHANCED_SEAM_ANALYZER_ROADMAP.md`
- `c:\Users\thump\SkepticalWombat\src\contracts.ts`
- `c:\Users\thump\SkepticalWombat\src\stubs.ts`
- `c:\Users\thump\SkepticalWombat\tests\test-analyzeDataFlows.js`
- `c:\Users\thump\SkepticalWombat\src\agents\dev-utilities.ts`
- `c:\Users\thump\SkepticalWombat\tsc_errors.txt` (I will provide content if needed for broader error fixing later).

---

**SECTION 5: MY EXPECTATIONS FOR YOUR BEHAVIOR (`ü§ñ COPILOT_ACTION: NOTE DIRECTIVES`)**

1.  **SDD First:** Always prioritize SDD principles.
2.  **Incremental Chunks:** Break down your work into logical sub-steps. After each significant sub-step, confirm success or describe issues.
3.  **Compilation Checks:** After applying code changes to `.ts` files, state that you will (or I should) run `npx tsc`. Report the outcome.
4.  **Clarity on File Changes:** Clearly state which file you intend to modify.
5.  **Context Awareness & Ripple Effect:** If my instructions seem to conflict with established patterns or might have wide-ranging impacts, flag this. Consider the "Impact Radius" of changes.

---

Okay, Copilot, thank you for processing the project briefing.

Our immediate focus is **Task 1 from the "CURRENT PHASE: COMPLETING `analyzeDataFlows()` (Phase 6.3)"** section of our roadmap (which is item #1 on the checklist in `ENHANCED_SEAM_ANALYZER_ROADMAP.md`).

**Your first actions:**

1.  **Stabilize Test Execution & Output for `tests/test-analyzeDataFlows.js`:**
    - **Read `tests/test-analyzeDataFlows.js`**.
    - Ensure the script will run without runtime errors (we last fixed a `TypeError` related to `devUtilities`).
    - Ensure all `process.stdout.write` and `process.stderr.write` calls correctly output test status and results for each of the 5 main test cases. The goal is to see clear "Test Case X PASSED" or "Test Case X FAILED: [Reason]" messages.
    - Confirm that the initial diagnostic `console.log` messages we previously added to `DevUtilities` methods (e.g., `[DevUtilities] logMessage called`) and to the beginning of `analyzeDataFlows` in `stubs.ts` are indeed visible when the tests are run. If not, investigate why.
    - Apply any necessary changes to `tests/test-analyzeDataFlows.js` or `src/stubs.ts` (for initial logging) to achieve this.
    - After changes, state that the next step is to compile (`npx tsc`) and then run the test script (`node tests/test-analyzeDataFlows.js`).
    - Once you are ready for me to run these commands, let me know, and I will provide you with the full console output.
