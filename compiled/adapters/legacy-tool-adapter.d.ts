/**
 * SDD MCP Server - Legacy Tool Adapter
 * Adapter to wrap existing tool structure to conform to ToolModuleContract.
 *
 * ðŸ”Œ INTEGRATION: Legacy Tool Adapter Seam
 * Blueprint: Enables legacy tools to be used by the new registry
 *
 * Generated by: Gemini AI (Phase 2 Implementation)
 * Integrated by: GitHub Copilot
 */
import { ContractResult, ToolModuleContract } from "../contracts.js";
interface LegacyTool {
    definition: {
        name: string;
        description: string;
        inputSchema: Record<string, any>;
        outputSchema?: Record<string, any>;
    };
    handler: (args: any) => Promise<ContractResult<any>>;
}
/**
 * @function createLegacyToolAdapter
 * @description Creates a ToolModuleContract compliant object from a legacy tool structure.
 * @param legacyTool The legacy tool object.
 * @returns An object conforming to ToolModuleContract.
 * Blueprint: Wraps the legacy tool's definition and handler, and provides default metadata.
 */
export declare function createLegacyToolAdapter(legacyTool: LegacyTool): ToolModuleContract;
export {};
