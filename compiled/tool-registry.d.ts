/**
 * SDD MCP Server - Tool Registry Implementation
 * Implements the ToolRegistryContract for managing tool modules.
 *
 * ðŸŽ¯ CRITICAL: Tool Registry Seam Implementation
 * Blueprint: Modular, version-aware tool management with A/B testing support
 *
 * Generated by: Gemini AI (Phase 2 Implementation)
 * Integrated by: GitHub Copilot
 */
import { ContractResult, ToolDefinition, ToolExecutionConfig, ToolModuleContract, ToolRegistryContract } from "./contracts.js";
/**
 * @class ToolRegistry
 * @implements ToolRegistryContract
 * @description Manages the registration, discovery, and execution of tool modules.
 * Supports versioning and provides hooks for A/B testing logic.
 */
export declare class ToolRegistry implements ToolRegistryContract {
    private tools;
    constructor();
    /**
     * @inheritdoc
     * Blueprint: Registers a tool module. Validates input and handles versioning.
     */
    registerTool(module: ToolModuleContract): Promise<ContractResult<void>>;
    /**
     * @inheritdoc
     * Blueprint: Retrieves definitions for all registered tools across all versions.
     */
    getTools(): Promise<ContractResult<ToolDefinition[]>>;
    /**
     * @inheritdoc
     * Blueprint: Executes a tool by name, with optional version and configuration.
     */
    executeTool(name: string, args: any, config?: ToolExecutionConfig): Promise<ContractResult<any>>;
    /**
     * @inheritdoc
     * Blueprint: Unregisters a tool or a specific version.
     */
    unregisterTool(name: string, version?: string): Promise<ContractResult<void>>;
    /**
     * @inheritdoc
     * Blueprint: Gets a specific tool module or definition.
     */
    getTool(name: string, version?: string): Promise<ContractResult<ToolModuleContract | ToolDefinition>>;
}
