/**
 * SDD MCP Server - Legacy Tool Adapter
 * Adapter to wrap existing tool structure to conform to ToolModuleContract.
 * 
 * ðŸ”Œ INTEGRATION: Legacy Tool Adapter Seam
 * Blueprint: Enables legacy tools to be used by the new registry
 * 
 * Generated by: Gemini AI (Phase 2 Implementation)
 * Integrated by: GitHub Copilot
 */

import {
  ContractResult,
  ToolDefinition,
  ToolModuleContract,
  InvalidInputError
} from "../contracts.js";

// Blueprint: Define the expected structure of a "legacy" tool.
// This is based on the analysis of index.ts and enhanced-seam-analysis-tool.ts.
interface LegacyTool {
  definition: {
    name: string;
    description: string;
    inputSchema: Record<string, any>;
    outputSchema?: Record<string, any>;
  };
  // Assuming the legacy handler already returns Promise<ContractResult<any>>
  handler: (args: any) => Promise<ContractResult<any>>;
  // Legacy tools might not have explicit metadata or version
}

/**
 * @function createLegacyToolAdapter
 * @description Creates a ToolModuleContract compliant object from a legacy tool structure.
 * @param legacyTool The legacy tool object.
 * @returns An object conforming to ToolModuleContract.
 * Blueprint: Wraps the legacy tool's definition and handler, and provides default metadata.
 */
export function createLegacyToolAdapter(legacyTool: LegacyTool): ToolModuleContract {
  // Blueprint: Input validation for the legacy tool structure.
  if (!legacyTool || !legacyTool.definition || !legacyTool.handler || !legacyTool.definition.name) {
    // In a real scenario, this might throw or return a specific error result
    // depending on where this adapter is used. For a factory function, throwing is acceptable.
    const error = new InvalidInputError("Invalid legacy tool structure provided to adapter.");
    console.error("Legacy tool adapter error:", error.message);
    throw error; // Fail fast during adapter creation
  }

  // Blueprint: Construct the ToolModuleContract object.
  // Use the legacy definition directly.
  // Use the legacy handler directly (assuming it returns ContractResult<any>).
  // Create metadata, assigning a default version like 'legacy' or '1.0.0'.
  const adapter: ToolModuleContract = {
    definition: legacyTool.definition as ToolDefinition,
    handler: legacyTool.handler,
    metadata: {
      name: legacyTool.definition.name,
      version: '1.0.0-legacy', // Blueprint: Assign a default or recognizable version
      // dependencies, author, tags could be added if available in legacy structure or defaulted
    }
  };

  console.log(`Created adapter for legacy tool: ${legacyTool.definition.name}`);

  return adapter;
}

// Blueprint: Example of a mock legacy tool structure for testing/demonstration
// This would represent the shape of tools currently in src/tools/*.ts before refactor.
/*
interface MockLegacyToolStructure {
  definition: {
    name: string;
    description: string;
    inputSchema: any;
    outputSchema: any;
  };
  handler: (args: any) => Promise<ContractResult<any>>;
}

// Example mock legacy tool
const mockLegacyTool: MockLegacyToolStructure = {
  definition: {
    name: "mockLegacyTool",
    description: "A mock legacy tool.",
    inputSchema: { type: "object", properties: { input: { type: "string" } } },
    outputSchema: { type: "object", properties: { output: { type: "string" } } },
  },
  handler: async (args: any): Promise<ContractResult<any>> => {
    try {
      if (!args || typeof args.input !== 'string') {
        return { success: false, error: "Invalid input for mockLegacyTool" };
      }
      console.log(`Mock legacy tool handler received: ${args.input}`);
      return { success: true, data: { output: `Processed: ${args.input}` } };
    } catch (error: any) {
      console.error("Mock legacy tool error:", error.message);
      return { success: false, error: error.message };
    }
  }
};

// Example usage (for demonstration, not part of the delivered file content)
// const legacyAdapter = createLegacyToolAdapter(mockLegacyTool);
// console.log(legacyAdapter.metadata); // Should show name and version: '1.0.0-legacy'
*/
